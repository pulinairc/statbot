#%v2063#%dt080210#%t-2.commands.tcl#

################################################## Date: 26Feb08 ##

## Trivia 2.06.3.2 by rolle   -          Commands File Ver. 2063 ##

###################################################################

##                  Included ReadMe Files                        ##

##                   !!  Please Read  !!                         ##

##                                                               ##

##   1. ReadMe                                                   ##

##   2. Installation                                             ##

##   3. Commands                                                 ##

##   4. Important Notes                                          ##

##                                                               ##

###################################################################

#                                                                 #

#  Commands File Install Notes:..........                         #

#                                                                 #

#  This tcl script Must be in the /scripts/t2 directory to work!  #

#  Does Not Require a source line in your eggdrop conf file!      #

#                                                                 #

###################################################################





############################################################################

### NO SCRIPT SETTINGS IN THIS FILE!!  NO SCRIPT SETTINGS IN THIS FILE!! ###

############################################################################

#######   !!  DO NOT EDIT THIS FILE  !!  DO NOT EDIT THIS FILE  !!   #######

############################################################################

###  !!  All      Trivia Script Settings In File:  t-2.settings.tcl  !!  ###

############################################################################



if {![info exists t2(_cm)]} {  return 1  }



if {$t2(_cm) eq "h"} {  set t2(_event) ""  ;  set t2(_evls) ""

  set t2(_dals) ""  ;  set t2(_wels) ""  ;  set t2(_mols) ""  ;  set t2(_other) ""

  set t2(_op) [open $t2(sfpath)t2.hist]  ;  set t2(_new) [open $t2(sfpath)t2.hst.tmp w]

  set t2(_ln) [gets $t2(_op)]  ;  puts $t2(_new) [string replace $t2(_ln) 2 2 N2]

  set t2(_ln) [gets $t2(_op)]  ;  set t2(_info) [open $t2(sfpath)t2.hist.info w]

  puts $t2(_info) [string range $t2(_ln) 4 end]  ;  close $t2(_info)

  while {![eof $t2(_op)]} {  set t2(_ln) [gets $t2(_op)]

   if {$t2(_event) ne "" && ![string match :N:* $t2(_ln)]} {

     if {[string match ::D:* $t2(_event)]} {

       set t2(_dals) [linsert $t2(_dals) 0 $t2(_event) $t2(_evls)]

     } elseif {[string match ::W:* $t2(_event)]} {

       set t2(_wels) [linsert $t2(_wels) 0 $t2(_event) $t2(_evls)]

     } else {  set t2(_mols) [linsert $t2(_mols) 0 $t2(_event) $t2(_evls)]  }

     set t2(_event) ""  ;  set t2(_evls) ""

   }

   if {[string match {::[DWM]:*} $t2(_ln)]} {  set t2(_event) $t2(_ln)

   } elseif {[string match :N:* $t2(_ln)]} {  lappend t2(_evls) $t2(_ln)

   } elseif {$t2(_ln) ne ""} {  set t2(_other) [linsert $t2(_other) 0 $t2(_ln)]  }

  }

  close $t2(_op)

  foreach {t2(_y) t2(_z)} {_dals _da2 _wels _we2 _mols _mo2} {

   if {[llength $t2($t2(_y))]>"14"} {  set t2($t2(_z)) [lrange $t2($t2(_y)) 14 end]

       set t2($t2(_y)) [lrange $t2($t2(_y)) 0 13]  }

  }

  foreach t2(_x) {_dals _wels _mols _da2 _we2 _mo2} {

   if {[info exists t2($t2(_x))] && $t2($t2(_x)) ne ""} {

     foreach {t2(_y) t2(_z)} $t2($t2(_x)) {  puts $t2(_new) $t2(_y)

      if {$t2(_z) ne ""} {

        foreach t2(_plar) $t2(_z) {  puts $t2(_new) $t2(_plar)  }

      }

     }

   }

   if {$t2(_x) eq "_mols"} {  puts $t2(_new) "::X: Extra History:"  }

  }

  if {$t2(_other) ne ""} {

    foreach t2(_y) $t2(_other) {  puts $t2(_new) $t2(_y)  }

  }

  close $t2(_new)  ;  file delete $t2(sfpath)t2.hist

  file rename -force $t2(sfpath)t2.hst.tmp $t2(sfpath)t2.hist  ;  file delete $t2(sfpath)t2.hst.tmp

  array unset t2 _*  ;  return 0

}



## MIX ##

if {$t2(_cm) eq "m"} {

 if {$t2(_td)=="0"} {  set t2(_nm) ""  ;  set t2(_wt) ""  ;  TCntQes 1

   set t2(_tx) [TStrLo [string trim $t2(_tx)]]

   if {$t2(_tx)==""} {  set t2(_nm) 4

   } else {  set t2(_tx) [split $t2(_tx)]

     foreach t2(_tm) $t2(_tx) {

      if {[TStrDig $t2(_tm)]} {

        if {$t2(_nm)!="+"} {  set t2(_tm) [string trimleft $t2(_tm) 0]

          if {$t2(_tm)=="" || $t2(_tm)>"9"} { set t2(_nm) 4 } else { set t2(_nm) $t2(_tm) }

        }

      } else { set t2(_fr) [string index $t2(_tm) 0] ; set t2(_ls) [string index $t2(_tm) end]

        if {$t2(_fr)=="+" || $t2(_ls)=="+"} {  set t2(_nm) "+"

        } elseif {[TStrDig $t2(_fr)] || [TStrDig $t2(_ls)]} {

          if {$t2(_nm)!="+"} {

            if {[TStrDig $t2(_fr)] && $t2(_fr)>"0"} {  set t2(_nm) $t2(_fr)

            } elseif {[TStrDig $t2(_ls)] && $t2(_ls)>"0"} {  set t2(_nm) $t2(_ls)

            } else {  set t2(_nm) 4  }

          }

        }

        set t2(_tm) [string trim $t2(_tm) "+1234567890"]

        if {$t2(_tm)!=""} {

          if {[string match q* $t2(_tm)]} {  set t2(_wt) q

          } elseif {[string match k* $t2(_tm)]} {  set t2(_wt) k  }

        }

      }

     }

     if {$t2(_nm)==""} {  set t2(_nm) 4  }

   }

   set t2(_tx) $t2(_nm)  ;  set t2(_td) ""  ;  set t2(_er) 0

   if {$t2(_qfl)!="" && $t2(_wt)!="k"} {

     if {$t2(-qtotal)>"3499"} {  lappend t2(_td) ques  } else {  incr t2(_er)  }

   }

   if {$t2(_kfl)!="" && $t2(_wt)!="q"} {

     if {$t2(-ktotal)>"99"} {  lappend t2(_td) kaos  } else {  incr t2(_er) 2  }

   }

   if {$t2(_td)==""} {

     if {$t2(_wt)=="q"} {  set t2(_tm) " kysymyksille."

     } elseif {$t2(_wt)=="k"} {  set t2(_tm) " KAOSille."  } else {  set t2(_tm) "."  }

     putserv "PRIVMSG $t2(_nk) :Mix disabloitu$t2(_tm) vaatii enemmän kysymyksiä."

     set t2(_tm) ".mix vaatii minimissään"

     if {$t2(_wt)!=""} {  set t2(_tm) [string replace $t2(_tm) 7 8 "x $t2(_wt) "]  }

     if {$t2(_wt)=="k"} {  putserv "PRIVMSG $t2(_nk) :$t2(_tm) 100 KAOSta toimiakseen."

     } elseif {$t2(_er)>"1" && $t2(_wt)==""} {

       putserv "PRIVMSG $t2(_nk) :$t2(_tm) 3500 kys ja/tai 100 KAOSta toimiakseen."

     } else {  putserv "PRIVMSG $t2(_nk) :$t2(_tm) 3500 kysymystä toimiakseen."  }

     array unset t2 _*  ;  return 2

   } elseif {$t2(_er)=="2"} {

     putserv "PRIVMSG $t2(_nk) :Mix Disabloitu KOASille. Requires 100+ toimiakseen."

   } elseif {$t2(_er)=="1"} {

     putserv "PRIVMSG $t2(_nk) :Mix Disabloitu kysymyksille. Requires 3500+ toimiakseen."

   }

   if {$t2(-ison)=="1"} {

     TOnOff $t2(_nk) $t2(_uh) $t2(_hn) $t2(chan) 0 1

     putquick "PRIVMSG $t2(chan) :Peli pysäytetty, sekoitetaan..."

     set t2(_wo) 1

   }

 }

 incr t2(_ti)

 if {[lindex $t2(_td) 0]=="ques"} {  set t2(_dbl) $t2(_qfl)

   if {$t2(_tx)=="+"} {

     if {$t2(_ti)=="1"} {  putserv "PRIVMSG $t2(_nk) :Sekoitetaan kysymyksiä läpi..."  }

putserv "PRIVMSG $t2(_nk) :mix+ dont work. Sekoitetaan kysymykset 4 kertaa..." ; set t2(_tx) 4

   } else {

     if {$t2(_ti)=="1"} {  putserv "PRIVMSG $t2(_nk) :Sekoitetaan kysymykset $t2(_tx) kertaa..."

     } else {  putserv "PRIVMSG $t2(_nk) :Question mix #$t2(_ti)..."  }

   }

 } else {  set t2(_dbl) $t2(_kfl)  ;  set t2(_kcl) ""

   if {$t2(-ktotal)<"3999"} {

     foreach t2(_tm) $t2(_kfl) {

      set t2(_tm) [split [lindex [split $t2(_tm) /] end] .]

      if {[llength $t2(_tm)]=="3"} {  lappend t2(_kcl) 1000

      } else {  lappend t2(_kcl) [lindex $t2(_tm) 3]  }

     }

   }

   if {$t2(_tx)=="+"} {

     if {$t2(_ti)=="1"} {  putserv "PRIVMSG $t2(_nk) :Sekoitetaan perinpohjaisesti Kaos..."  }

putserv "PRIVMSG $t2(_nk) :mix+ dont work. Sekoitetaan kaos 4 kertaa..." ; set t2(_tx) 4

   } else {

     if {$t2(_ti)=="1"} {  putserv "PRIVMSG $t2(_nk) :Sekoitetaan kaos $t2(_tx) kertaa..."

     } else {  putserv "PRIVMSG $t2(_nk) :Kaos mix #$t2(_ti)..."  }

   }

 }

 set t2(_qfc) [llength $t2(_dbl)]

 if {$t2(_tx)=="+"} {

 } else {  set t2(_mlc) [expr {$t2(_qfc)/10}]

   if {[expr {$t2(_qfc)%10}] > "0"} {  incr t2(_mlc)  }

   set t2(_tm) 0  ;  set t2(_tml) ""

   while {$t2(_tm)<$t2(_mlc)} {  set mlist($t2(_tm)) ""

       lappend t2(_tml) $t2(_tm)  ;  incr t2(_tm)  }

   set t2(_tm) 0

   while {$t2(_dbl)!=""} {  set t2(_t2) [rand [llength $t2(_dbl)]]

    lappend mlist($t2(_tm)) [lindex $t2(_dbl) $t2(_t2)]

    set t2(_dbl) [lreplace $t2(_dbl) $t2(_t2) $t2(_t2)]  ;  incr t2(_tm)

    if {$t2(_tm)==$t2(_mlc)} {  set t2(_tm) 0  }

   }

   set newqfil(0) [open $t2(qfpath)qfil.tmp.0 w]  ;  set nqfcnt(0) 0

   set newqfil(1) [open $t2(qfpath)qfil.tmp.1 w]  ;  set nqfcnt(1) 0

   set newqfil(2) [open $t2(qfpath)qfil.tmp.2 w]  ;  set nqfcnt(2) 0

   set newqfil(3) [open $t2(qfpath)qfil.tmp.3 w]  ;  set nqfcnt(3) 0

   set t2(_lnf) 3  ;  set t2(_pc) 0  ;  set t2(_pt) 0

   foreach t2(_nm) $t2(_tml) {  set t2(_ofl) ""

    foreach t2(_dbf) $mlist($t2(_nm)) {

     if {[lindex $t2(_td) 0]=="ques"} {  set t2(_tm) [lindex [split $t2(_dbf) .] end]

     } else {  set t2(_tm) [lindex [split [lindex [split $t2(_dbf) /] end] .] 2]  }

     set oldfile($t2(_tm)) [open $t2(_dbf) r]  ;  lappend t2(_ofl) $t2(_tm)

    }

    set t2(_lr) ""  ;  set t2(_lg) ""

    while {$t2(_ofl) != ""} {  set t2(_gf) [rand [llength $t2(_ofl)]]

     if {[llength $t2(_ofl)]>"2" && ($t2(_gf)==$t2(_lr) || $t2(_gf)==$t2(_lg))} {

       if {$t2(_gf)!=$t2(_lr)} {  set t2(_lr) $t2(_gf)  }

       set t2(_tmi) [expr {$t2(_lg)+1}]

       if {$t2(_tmi)>=[llength $t2(_ofl)]} {  set t2(_tmi) 0  }

       set t2(_gf) $t2(_tmi)  ;  set t2(_lg) $t2(_tmi)

     } else {  set t2(_lr) $t2(_gf)  ;  set t2(_lg) $t2(_gf)  }

     set t2(_qe) [gets $oldfile([lindex $t2(_ofl) $t2(_gf)])]

     if {$t2(_qe)==""} {  close $oldfile([lindex $t2(_ofl) $t2(_gf)])

       file delete [lindex $mlist($t2(_nm)) $t2(_gf)]

       set mlist($t2(_nm)) [lreplace $mlist($t2(_nm)) $t2(_gf) $t2(_gf)]

       set t2(_ofl) [lreplace $t2(_ofl) $t2(_gf) $t2(_gf)]

     } else {  incr t2(_pc)

       puts $newqfil($t2(_pt)) "$t2(_qe)"  ;  incr nqfcnt($t2(_pt))

       if {[lindex $t2(_td) 0]=="kaos" && $t2(_kcl)!="" && $nqfcnt(3)<"1000"} {

         if {$nqfcnt($t2(_pt))==[lindex $t2(_kcl) $t2(_pt)]} {

           if {$t2(_pt)=="3"} {  set t2(_pc) 0

             if {$nqfcnt(0)==$nqfcnt(3)} {  set t2(_pt) 0

             } else {  set t2(_t2) 0  ;  set t2(_tc) 0

               foreach t2(_t3) $t2(_kcl) {

                if {$t2(_t3)<$t2(_t2)} {  set t2(_pt) $t2(_tc)  ;  break  }

                set t2(_t2) $t2(_t3)  ;  incr t2(_tc)

               }

             }

           } else {  incr t2(_pt)  ;  set t2(_pc) 0  }

         } elseif {$t2(_pc)=="20" || $nqfcnt($t2(_pt))>[lindex $t2(_kcl) $t2(_pt)]} {

           set t2(_pc) 0

           if {$t2(_pt)=="3"} {  set t2(_pt) 0  } else {  incr t2(_pt)  }

         }

       } elseif {$t2(_pt)=="3"} {

         if {$nqfcnt(3)=="1000"} {

           if {[lindex $t2(_td) 0]=="kaos" && $t2(_kcl)!=""} {  set t2(_kcl) ""  }

           close $newqfil(3)  ;  close $newqfil(2)

           close $newqfil(1)  ;  close $newqfil(0)  ;  set t2(_tc) 0

           while {$t2(_tc)<"4"} {  incr t2(_lnf)

            set newqfil($t2(_tc)) [open $t2(qfpath)qfil.tmp.$t2(_lnf) w]

            set nqfcnt($t2(_tc)) 0  ;  incr t2(_tc)

           }

           set t2(_pc) 0  ;  set t2(_pt) 0

         } elseif {$t2(_pc)=="20"} {  set t2(_pc) 0  ;  set t2(_pt) 0  }

       } else {

         if {$t2(_pc)=="20"} {  incr t2(_pt)  ;  set t2(_pc) 0  }

       }

     }

    }

   }

   close $newqfil(3)  ;  close $newqfil(2)

   close $newqfil(1)  ;  close $newqfil(0)  ;  set t2(_fwq) ""

   if {$nqfcnt(0)=="0"} {  file delete $t2(qfpath)qfil.tmp.$t2(_lnf)

     file delete $t2(qfpath)qfil.tmp.[incr t2(_lnf) -1]

     file delete $t2(qfpath)qfil.tmp.[incr t2(_lnf) -1]

     file delete $t2(qfpath)qfil.tmp.[incr t2(_lnf) -1]

   } elseif {[lindex $t2(_td) 0]=="kaos" && $t2(_kcl)!=""} {  set t2(_fwq) 4kaos

   } else {

     if {$nqfcnt(0)<"1000"} { lappend t2(_fwq) [expr {$t2(_lnf)-3}] }

     if {$nqfcnt(1)>"0" && $nqfcnt(1)<"1000"} { lappend t2(_fwq) [expr {$t2(_lnf)-2}]

     } elseif {$nqfcnt(1)=="0"} { file delete $t2(qfpath)qfil.tmp.[expr {$t2(_lnf)-2}] }

     if {$nqfcnt(2)>"0" && $nqfcnt(2)<"1000"} { lappend t2(_fwq) [expr {$t2(_lnf)-1}]

     } elseif {$nqfcnt(2)=="0"} { file delete $t2(qfpath)qfil.tmp.[expr {$t2(_lnf)-1}] }

     if {$nqfcnt(3)>"0" && $nqfcnt(3)<"1000"} { lappend t2(_fwq) $t2(_lnf)

     } elseif {$nqfcnt(3)=="0"} { file delete $t2(qfpath)qfil.tmp.$t2(_lnf) }

     if {[llength $t2(_fwq)]>"1"} {  set t2(_dun) 0

       set t2(_wfo) 0  ;  set t2(_rfo) 0  ;  set t2(_nf) [lindex $t2(_fwq) 0]

       while {$t2(_dun)=="0"} {

        if {$t2(_wfo)=="0"} {  set t2(_wfi) [open $t2(qfpath)qfil.tmp.last w]

          set t2(_wc) 0  ;  set t2(_wfo) 1

        }

        if {$t2(_rfo)=="0"} {

          set t2(_rfi) [open $t2(qfpath)qfil.tmp.[lindex $t2(_fwq) 0]]

          set t2(_rfo) "$t2(qfpath)qfil.tmp.[lindex $t2(_fwq) 0]"

        }

        while {![eof $t2(_rfi)]} {  set t2(_rl) [gets $t2(_rfi)]

         if {$t2(_rl)!=""} {  puts $t2(_wfi) "$t2(_rl)"  ;  incr t2(_wc)

           if {$t2(_wc)=="1000"} {  close $t2(_wfi)

             file rename $t2(qfpath)qfil.tmp.last $t2(qfpath)qfil.tmp.$t2(_nf)

             set t2(_wfi) [open $t2(qfpath)qfil.tmp.last w]

             set t2(_wc) 0  ;  incr t2(_nf)

           }

         }

        }

        close $t2(_rfi)  ;  file delete $t2(_rfo)  ;  set t2(_rfo) 0

        set t2(_fwq) [lreplace $t2(_fwq) 0 0]

        if {$t2(_fwq)==""} {  close $t2(_wfi)

          if {$t2(_wc)=="0"} {  file delete $t2(qfpath)qfil.tmp.last

          } else {

            if {$t2(_wc)<"1000"} {  set t2(_nf) "$t2(_wc).$t2(_nf)"  }

            file rename $t2(qfpath)qfil.tmp.last $t2(qfpath)qfil.tmp.$t2(_nf)

          }

          set t2(_dun) 1  ;  break

        }

       }

     } else {

       file rename $t2(qfpath)qfil.tmp.$t2(_fwq) $t2(qfpath)qfil.tmp.$nqfcnt($t2(_fwq)).$t2(_fwq)

     }

   }

   if {$t2(_fwq)=="4kaos"} {  set t2(_tm) 0

     while {$t2(_tm)<"4"} {  set t2(_tn) 00$t2(_tm)

      if {$nqfcnt($t2(_tm))<"1000"} {  append t2(_tn) .$nqfcnt($t2(_tm))  }

      file rename $t2(qfpath)qfil.tmp.$t2(_tm) $t2(qfpath)t2.kf.$t2(_tn)

      incr t2(_tm)

     }

   } else {  set t2(_tfl) [glob -directory $dir -nocomplain qfil.tmp.*]

     foreach t2(_tfi) $t2(_tfl) {

      set t2(_t2) [split [lindex [split $t2(_tfi) /] end] .]

      set t2(_tn) [lindex $t2(_t2) end]

      if {[string length $t2(_tn)]=="1"} {  set t2(_tn) "00$t2(_tn)"

      } elseif {[string length $t2(_tn)]=="2"} {  set t2(_tn) "0$t2(_tn)"  }

      if {[lindex $t2(_td) 0]=="ques"} {

        if {[llength $t2(_t2)]>"3"} {  set t2(_tn) "qf.[lindex $t2(_t2) end-1].$t2(_tn)"

        } else {  set t2(_tn) "qf.$t2(_tn)"  }

      } else {

        if {[llength $t2(_t2)]>"3"} {  set t2(_tn) "kf.$t2(_tn).[lindex $t2(_t2) end-1]"

        } else {  set t2(_tn) "kf.$t2(_tn)"  }

      }

      file rename $t2(_tfi) $t2(qfpath)t2.$t2(_tn)

     }

   }

 }

 array unset mlist ; array unset newqfil ; array unset nqfcnt ; array unset oldfile

 if {$t2(_ti)==$t2(_tx) || $t2(_tx)=="+"} {

   if {[lindex $t2(_td) 0]=="ques"} {  file delete $t2(sfpath)t2.qcount

   } else {  file delete $t2(sfpath)t2.kcount  }

   if {[llength $t2(_td)]=="2"} {  set t2(_td) [lindex $t2(_td) 1]

     utimer 2 "[list TMix $t2(_nk) $t2(_uh) $t2(_hn) $t2(_tx) 0 $t2(_wo) $t2(_td)]"

   } else {  TCntQes

     if {$t2(_wo)=="1"} {  TOnOff $t2(_nk) $t2(_uh) $t2(_hn) $t2(chan) 1 1  }

   }

 } else {  utimer 2 "[list TMix $t2(_nk) $t2(_uh) $t2(_hn) $t2(_tx) $t2(_ti) $t2(_wo) $t2(_td)]"  }

 array unset t2 _*  ;  return 0

}



return 9
