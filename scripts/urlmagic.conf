#! tclsh
################################################################################
#         Start of user variables, copy things below this line into            #
#                   URLMAGIC_BASEDIR/urlmagic.conf                             #
#   e.g. by executing cat urlmagic.conf.example > urlmagic.conf                #
################################################################################

namespace eval ::urlmagic {

# links posted by users with these flags are ignored
set settings(ignore-flags) bdkqr|dkqr

# stop listening for this many seconds after processing an address
set settings(seconds-between) 10

# stop listening to a user for this many seconds after they mentioned an URL
set settings(seconds-between-user) 2

# wait this many milliseconds for a web server to respond
set settings(timeout) 10000

# do not download pages larger than this many bytes
set settings(max-download) 1048576

# if cookie shelf life > this many minutes, eat it sooner
set settings(max-cookie-age) 2880

# HTTP User-Agent which will be sent with each request
set settings(user-agent) "Mozilla/5.0 (compatible; TCL [info patchlevel] HTTP library) 20110501"

# this regular expression is used to detect URLs. URLs which do not contain
# "://" will be extended to assume a default protocol of "http://"
set settings(url-regex) {(https?://|www\.|[a-z0-9\-]+\.[a-z]{2,4}/)\S+}

# After someone posted an URL, ignore them for this many seconds. Set to 0 to disable
set settings(seconds-between-user) 1

# Penalize users flooding URLs for this many seconds
set settings(url-flooding-penalty) 3

# Ignore URLs on a busy channel for this many seconds
set settings(seconds-between-channel) 1

# Add headers you want to send on requests. Accept-Language tells the server
# that you prefer english versions of any document over any other language,
# even if your IP is not geographically located in an English-speaking country.
# See http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1
set settings(default-headers)        {Accept-Language "en, *;q=0.9"}

# What format should be used for the nickname part of the url info that's sent
# to the channel? %s is replaced by the nickname. To insert a literal %, you
# need to use %%. If you don't want the nickname to be inserted, you can set
# this to "". You can also add things like colors and bold here (see the
# eggdrop documentation for the codes).
set settings(nick-format) "<%s>"

# What format should be used for the URL title? %s is replaced by the link
# title or the content type in case a title isn't available (for instance,
# because the link does not point to a website but an image).
# As always with IRC messages, \002 is bold. First \002 turns bold text on, the
# second one turns it off again.
set settings(title-format) "\002%s\002"

# Set this if you don't want the titles to be printed to the channel for some
# reason, for instance because you only want to tweet them or log them to
# sqlite. There's also an udef flag (.chanset #channel +urlmagic-silent) you
# can set if you want to silence the title announcements only on a particular
# channel.
set settings(global-silent) no

# Set the options for https support here. More information:
# http://docs.activestate.com/activetcl/8.6/tls/tls.html#tls::import
# You probably won't need this, but make sure none of your other scripts 
# registers tls::socket into the http module for tls support, or else you
# might accidentally turn off TLSv1 support.
set settings(tls-options) {-ssl2 no -ssl3 yes -tls1 yes}

# Uncomment either of the following lines, gumbo is recommended but will
# require you to install the Google gumbo library and to compile a Tcl module
# in the subdirectory "htmltitle_gumbo". arabica is another such module using
# the arabica HTML/tagsoup parser. Finally, "dumb" is an implementation written
# in Tcl, which uses a simple regex. This doesn't always work, but should be
# okay most of the time. Use this if you can't compile code for some reason.
# Currently, best results are achieved by using the gumbo library, which is the
# default for that reason. However, it is not packaged on most Linux
# distributions as of mid 2014. A workaround is to use the implementation in
# perl (which has additional dependencies, see below as well as the README)
set settings(htmltitle) "gumbo"
#set settings(htmltitle) "arabica"
#set settings(htmltitle) "dumb"
#set settings(htmltitle) "perl" ;# see below

# Here you can change the perl interpreter which is used by the title parser.
# The default should probably work on most systems.
set settings(perl-interpreter) "/usr/bin/env perl"

# Here you can specify which plugins to load. See the plugins directory for a
# list of plugins. They each have a description and maybe settings which you
# should also copy-paste to this config file. The list items are separated by
# space.
#
# Default: no plugins are enabled.
set settings(plugins) {}

# Example (contains all plugins which currently exist, pick any that you like):
# set settings(plugins) {nsfw size sqlite tinyurl twitter}
set settings(plugins) {nsfw size sqlite tinyurl}

}

# This is the configuration file for the twitter plugin for urlmagic.
# Concatenate it to the urlmagic configuration file as follows, then edit that.
#
#   cat twitter.conf >> ~/eggdrop/conf/urlmagic.tcl

namespace eval ::urlmagic::plugins::twitter {
	# Your login data goes here:
	set settings(username) "pulinainfo"
	set settings(password) "lk3kRBk6i"

	# You'll need to set this flag on all channels where you want to tweet
	# URLs. If you don't want to tweet URLs at all, e.g. if you're using
	# the twitter plugin in another script to tweet, just don't set this
	# udef flag on any channels.
	set settings(udef-flag) "tweet-urls"

	# If you want the udef-flag to have no effect at all (just to make sure
	# no untrustworthy channel owner sets it on their channel or something
	# like that), set this to no
	set settings(tweet-urls-at-all) yes
}

namespace eval ::urlmagic::plugins::tinyurl {
	# maximum length of an URL before it gets shortened
	set settings(maxlength) 30

	# URL of the URL shortening service to use
	set settings(tinyurl-service) "http://tinyurl.com/api-create.php"

	# name of the POST data field to use for the URL shortening service
	set settings(tinyurl-post-field) "url"

	# 10s should be enough for tinyurl.com to react
	set settings(timeout) 10000
}

namespace eval ::urlmagic::plugins::sqlite {
	set settings(urlmagic-db) "/home/rolle/eggdrop/scripts/data/urlmagic.db"
}
